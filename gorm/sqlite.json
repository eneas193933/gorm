{"global_del": "DELETE FROM global WHERE global.\"key\" = ?", "del_node_val_graph": "DELETE FROM node_val WHERE node_val.graph = ?", "create_edge_val": "\nCREATE TABLE edge_val (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, \"nodeA\", \"nodeB\", idx, \"key\", branch, rev), \n\tFOREIGN KEY(graph, \"nodeA\", \"nodeB\", idx) REFERENCES edges (graph, \"nodeA\", \"nodeB\", idx), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n", "create_branches": "\nCREATE TABLE branches (\n\tbranch VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\tparent VARCHAR(50), \n\tparent_rev INTEGER, \n\tPRIMARY KEY (branch), \n\tFOREIGN KEY(branch) REFERENCES branches (parent)\n)\n\n", "create_edges": "\nCREATE TABLE edges (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\textant BOOLEAN, \n\tPRIMARY KEY (graph, \"nodeA\", \"nodeB\", idx, branch, rev), \n\tFOREIGN KEY(graph, \"nodeA\") REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph, \"nodeB\") REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n", "del_node_graph": "DELETE FROM nodes WHERE nodes.graph = ?", "graph_val_ins": "INSERT INTO graph_val (graph, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?)", "parrev": "SELECT branches.parent_rev \nFROM branches \nWHERE branches.branch = ?", "edge_exists": "SELECT edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.\"nodeB\" = ? AND edges.idx = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "exist_node_ins": "INSERT INTO nodes (graph, node, branch, rev, extant) VALUES (?, ?, ?, ?, ?)", "ctgraph": "SELECT COUNT(graphs.graph) AS \"COUNT_1\" \nFROM graphs \nWHERE graphs.graph = ?", "edge_val_upd": "UPDATE edge_val SET value=? WHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.idx = ? AND edge_val.branch = ? AND edge_val.rev = ?", "graph_type": "SELECT graphs.type \nFROM graphs \nWHERE graphs.graph = ?", "multi_edges": "SELECT edges.idx, edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.\"nodeB\" = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "global_get": "SELECT global.value \nFROM global \nWHERE global.\"key\" = ?", "create_graphs": "\nCREATE TABLE graphs (\n\tgraph VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\ttype VARCHAR(50), \n\tPRIMARY KEY (graph), \n\tCHECK (type IN ('Graph', 'DiGraph', 'MultiGraph', 'MultiDiGraph'))\n)\n\n", "nodes_dump": "SELECT nodes.graph, nodes.node, nodes.branch, nodes.rev, nodes.extant \nFROM nodes", "node_exists": "SELECT nodes.extant \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.rev <= ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS hirev ON nodes.graph = hirev.graph AND nodes.node = hirev.node AND nodes.branch = hirev.branch AND nodes.rev = hirev.rev", "global_upd": "UPDATE global SET value=? WHERE global.\"key\" = ?", "graph_val_get": "SELECT graph_val.value \nFROM graph_val JOIN (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, MAX(graph_val.rev) AS rev \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.rev <= ? GROUP BY graph_val.graph, graph_val.\"key\", graph_val.branch) AS hirev ON graph_val.graph = hirev.graph AND graph_val.\"key\" = hirev.\"key\" AND graph_val.branch = hirev.branch AND graph_val.rev = hirev.rev", "nodeBs": "SELECT edges.\"nodeB\", edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "parparrev": "SELECT branches.parent, branches.parent_rev \nFROM branches \nWHERE branches.branch = ?", "edge_exist_upd": "UPDATE edges SET extant=? WHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.\"nodeB\" = ? AND edges.idx = ? AND edges.branch = ? AND edges.rev = ?", "allbranch": "SELECT branches.branch, branches.parent, branches.parent_rev \nFROM branches", "node_val_dump": "SELECT node_val.graph, node_val.node, node_val.\"key\", node_val.branch, node_val.rev, node_val.value \nFROM node_val", "create_node_val": "\nCREATE TABLE node_val (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, node, \"key\", branch, rev), \n\tFOREIGN KEY(graph, node) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n", "index_node_val": "CREATE INDEX node_val_idx ON node_val (graph, node)", "edges_dump": "SELECT edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch, edges.rev, edges.extant \nFROM edges", "nodeAs": "SELECT edges.\"nodeA\", edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeB\" = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "node_val_get": "SELECT node_val.value \nFROM node_val JOIN (SELECT node_val.graph AS graph, node_val.node AS node, node_val.branch AS branch, node_val.\"key\" AS \"key\", MAX(node_val.rev) AS rev \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND node_val.rev <= ? GROUP BY node_val.graph, node_val.node, node_val.branch, node_val.\"key\") AS hirev ON node_val.graph = hirev.graph AND node_val.node = hirev.node AND node_val.\"key\" = hirev.\"key\" AND node_val.branch = hirev.branch AND node_val.rev = hirev.rev \nWHERE node_val.value IS NOT NULL", "global_items": "SELECT global.\"key\", global.value \nFROM global", "create_nodes": "\nCREATE TABLE nodes (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\textant BOOLEAN, \n\tPRIMARY KEY (graph, node, branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n", "edge_val_items": "SELECT edge_val.\"key\", edge_val.value \nFROM edge_val JOIN (SELECT edge_val.graph AS graph, edge_val.\"nodeA\" AS \"nodeA\", edge_val.\"nodeB\" AS \"nodeB\", edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, MAX(edge_val.rev) AS rev \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.idx = ? AND edge_val.branch = ? AND edge_val.rev <= ? GROUP BY edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.\"key\", edge_val.branch) AS hirev ON edge_val.graph = hirev.graph AND edge_val.\"nodeA\" = hirev.\"nodeA\" AND edge_val.\"nodeB\" = hirev.\"nodeB\" AND edge_val.idx = hirev.idx AND edge_val.branch = hirev.branch AND edge_val.rev = hirev.rev", "index_edges": "CREATE INDEX edges_idx ON edges (graph, \"nodeA\", \"nodeB\", idx)", "create_graph_val": "\nCREATE TABLE graph_val (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, \"key\", branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n", "new_branch": "INSERT INTO branches (branch, parent, parent_rev) VALUES (?, ?, ?)", "ctglobal": "SELECT COUNT(global.\"key\") AS \"COUNT_1\" \nFROM global", "create_global": "\nCREATE TABLE global (\n\t\"key\" VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (\"key\")\n)\n\n", "node_val_ins": "INSERT INTO node_val (graph, node, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?)", "ctbranch": "SELECT COUNT(branches.branch) AS \"COUNT_1\" \nFROM branches \nWHERE branches.branch = ?", "graph_val_dump": "SELECT graph_val.graph, graph_val.\"key\", graph_val.branch, graph_val.rev, graph_val.value \nFROM graph_val", "graph_val_upd": "UPDATE graph_val SET value=? WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.rev = ?", "index_nodes": "CREATE INDEX nodes_idx ON nodes (graph, node)", "node_val_upd": "UPDATE node_val SET value=? WHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND node_val.rev = ?", "edge_val_get": "SELECT edge_val.value \nFROM edge_val JOIN (SELECT edge_val.graph AS graph, edge_val.\"nodeA\" AS \"nodeA\", edge_val.\"nodeB\" AS \"nodeB\", edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, MAX(edge_val.rev) AS rev \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND edge_val.rev <= ? GROUP BY edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.\"key\", edge_val.branch) AS hirev ON edge_val.graph = hirev.graph AND edge_val.\"nodeA\" = hirev.\"nodeA\" AND edge_val.\"nodeB\" = hirev.\"nodeB\" AND edge_val.idx = hirev.idx AND edge_val.branch = hirev.branch AND edge_val.rev = hirev.rev", "del_graph": "DELETE FROM graphs WHERE graphs.graph = ?", "edge_val_dump": "SELECT edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.\"key\", edge_val.branch, edge_val.rev, edge_val.value \nFROM edge_val", "del_edge_val_graph": "DELETE FROM edge_val WHERE edge_val.graph = ?", "index_graph_val": "CREATE INDEX graph_val_idx ON graph_val (graph, \"key\")", "edge_exist_ins": "INSERT INTO edges (graph, \"nodeA\", \"nodeB\", idx, branch, rev, extant) VALUES (?, ?, ?, ?, ?, ?, ?)", "edge_val_ins": "INSERT INTO edge_val (graph, \"nodeA\", \"nodeB\", idx, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", "new_graph": "INSERT INTO graphs (graph, type) VALUES (?, ?)", "nodes_extant": "SELECT nodes.node \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.graph = ? AND nodes.branch = ? AND nodes.rev <= ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS hirev ON nodes.graph = hirev.graph AND nodes.node = hirev.node AND nodes.branch = hirev.branch AND nodes.rev = hirev.rev \nWHERE nodes.extant = 1", "exist_node_upd": "UPDATE nodes SET extant=? WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.rev = ?", "index_edge_val": "CREATE INDEX edge_val_idx ON edge_val (graph, \"nodeA\", \"nodeB\", idx, \"key\")", "global_ins": "INSERT INTO global (\"key\", value) VALUES (?, ?)", "node_val_items": "SELECT node_val.\"key\", node_val.value \nFROM node_val JOIN (SELECT node_val.graph AS graph, node_val.node AS node, node_val.branch AS branch, node_val.\"key\" AS \"key\", MAX(node_val.rev) AS rev \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.branch = ? AND node_val.rev <= ? GROUP BY node_val.graph, node_val.node, node_val.branch, node_val.\"key\") AS hirev ON node_val.graph = hirev.graph AND node_val.node = hirev.node AND node_val.\"key\" = hirev.\"key\" AND node_val.branch = hirev.branch AND node_val.rev = hirev.rev", "edges_extant": "SELECT edges.\"nodeA\", edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "graph_val_items": "SELECT graph_val.\"key\", graph_val.value \nFROM graph_val JOIN (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, MAX(graph_val.rev) AS rev \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.branch = ? AND graph_val.rev <= ? GROUP BY graph_val.graph, graph_val.\"key\", graph_val.branch) AS hirev ON graph_val.graph = hirev.graph AND graph_val.\"key\" = hirev.\"key\" AND graph_val.branch = hirev.branch AND graph_val.rev = hirev.rev"}
